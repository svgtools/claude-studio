    {
        "uuid": "29947a8c-2bc9-479c-8703-1b9111b4d229",
        "name": "How to use Claude",
        "description": "An example project that also doubles as a how-to guide for using Claude. Chat with it to learn more about how to get the most out of chatting with Claude!",
        "is_private": false,
        "is_starter_project": true,
        "prompt_template": "",
        "created_at": "2024-06-25T16:48:39.519963+00:00",
        "updated_at": "2024-06-25T16:48:39.519963+00:00",
        "creator": {
            "uuid": "83861058-e02f-410d-a3bd-d92f72faab0e",
            "full_name": "Nobody"
        },
        "docs": [
            {
                "uuid": "84fa70c6-552a-40bb-adfa-a9ef60c29993",
                "filename": "Claude prompting guide.md",
                "content": " # Claude prompting guide\n\n## General tips for effective prompting\n\n### 1. Be clear and specific\n   - Clearly state your task or question at the beginning of your message.\n   - Provide context and details to help Claude understand your needs.\n   - Break complex tasks into smaller, manageable steps.\n\n   Bad prompt:\n   <prompt>\n   \"Help me with a presentation.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"I need help creating a 10-slide presentation for our quarterly sales meeting. The presentation should cover our Q2 sales performance, top-selling products, and sales targets for Q3. Please provide an outline with key points for each slide.\"\n   </prompt>\n\n   Why it's better: The good prompt provides specific details about the task, including the number of slides, the purpose of the presentation, and the key topics to be covered.\n\n### 2. Use examples\n   - Provide examples of the kind of output you're looking for.\n   - If you want a specific format or style, show Claude an example.\n\n   Bad prompt:\n   <prompt>\n   \"Write a professional email.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"I need to write a professional email to a client about a project delay. Here's a similar email I've sent before:\n\n   'Dear [Client],\n   I hope this email finds you well. I wanted to update you on the progress of [Project Name]. Unfortunately, we've encountered an unexpected issue that will delay our completion date by approximately two weeks. We're working diligently to resolve this and will keep you updated on our progress.\n   Please let me know if you have any questions or concerns.\n   Best regards,\n   [Your Name]'\n\n   Help me draft a new email following a similar tone and structure, but for our current situation where we're delayed by a month due to supply chain issues.\"\n   </prompt>\n\n   Why it's better: The good prompt provides a concrete example of the desired style and tone, giving Claude a clear reference point for the new email.\n\n### 3. Encourage thinking\n   - For complex tasks, ask Claude to \"think step-by-step\" or \"explain your reasoning.\"\n   - This can lead to more accurate and detailed responses.\n\n   Bad prompt:\n   <prompt>\n   \"How can I improve team productivity?\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"I'm looking to improve my team's productivity. Think through this step-by-step, considering the following factors:\n   1. Current productivity blockers (e.g., too many meetings, unclear priorities)\n   2. Potential solutions (e.g., time management techniques, project management tools)\n   3. Implementation challenges\n   4. Methods to measure improvement\n\n   For each step, please provide a brief explanation of your reasoning. Then summarize your ideas at the end.\"\n   </prompt>\n\n   Why it's better: The good prompt asks Claude to think through the problem systematically, providing a guided structure for the response and asking for explanations of the reasoning process. It also prompts Claude to create a summary at the end for easier reading.\n\n### 4. Iterative refinement\n   - If Claude's first response isn't quite right, ask for clarifications or modifications.\n   - You can always say \"That's close, but can you adjust X to be more like Y?\"\n\n   Bad prompt:\n   <prompt>\n   \"Make it better.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"That\u2019s a good start, but please refine it further. Make the following adjustments:\n   1. Make the tone more casual and friendly\n   2. Add a specific example of how our product has helped a customer\n   3. Shorten the second paragraph to focus more on the benefits rather than the features\"\n   </prompt>\n\n   Why it's better: The good prompt provides specific feedback and clear instructions for improvements, allowing Claude to make targeted adjustments instead of just relying on Claude\u2019s innate sense of what \u201cbetter\u201d might be \u2014 which is likely different from the user\u2019s definition!\n\n### 5. Leverage Claude's knowledge\n   - Claude has broad knowledge across many fields. Don't hesitate to ask for explanations or background information\n   - Be sure to include relevant context and details so that Claude\u2019s response is maximally targeted to be helpful\n\n   Bad prompt:\n   <prompt>\n   \"What is marketing? How do I do it?\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"I'm developing a marketing strategy for a new eco-friendly cleaning product line. Can you provide an overview of current trends in green marketing? Please include:\n   1. Key messaging strategies that resonate with environmentally conscious consumers\n   2. Effective channels for reaching this audience\n   3. Examples of successful green marketing campaigns from the past year\n   4. Potential pitfalls to avoid (e.g., greenwashing accusations)\n\n   This information will help me shape our marketing approach.\"\n   </prompt>\n\n   Why it's better: The good prompt asks for specific, contextually relevant  information that leverages Claude's broad knowledge base. It provides context for how the information will be used, which helps Claude frame its answer in the most relevant way.\n\n### 6. Use role-playing\n   - Ask Claude to adopt a specific role or perspective when responding.\n\n   Bad prompt:\n   <prompt>\n   \"Help me prepare for a negotiation.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"You are a fabric supplier for my backpack manufacturing company. I'm preparing for a negotiation with this supplier to reduce prices by 10%. As the supplier, please provide:\n   1. Three potential objections to our request for a price reduction\n   2. For each objection, suggest a counterargument from my perspective\n   3. Two alternative proposals the supplier might offer instead of a straight price cut\n\n   Then, switch roles and provide advice on how I, as the buyer, can best approach this negotiation to achieve our goal.\"\n   </prompt>\n\n   Why it's better: This prompt uses role-playing to explore multiple perspectives of the negotiation, providing a more comprehensive preparation. Role-playing also encourages Claude to more readily adopt the nuances of specific perspectives, increasing the intelligence and performance of Claude\u2019s response.\n\n\n## Task-specific tips and examples\n\n### Content Creation\n\n1. **Specify your audience**\n   - Tell Claude who the content is for.\n\n   Bad prompt:\n   <prompt>\n   \"Write something about cybersecurity.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"I need to write a blog post about cybersecurity best practices for small business owners. The audience is not very tech-savvy, so the content should be:\n   1. Easy to understand, avoiding technical jargon where possible\n   2. Practical, with actionable tips they can implement quickly\n   3. Engaging and slightly humorous to keep their interest\n\n   Please provide an outline for a 1000-word blog post that covers the top 5 cybersecurity practices these business owners should adopt.\"\n   </prompt>\n\n   Why it's better: The good prompt specifies the audience, desired tone, and key characteristics of the content, giving Claude clear guidelines for creating appropriate and effective output.\n\n2. **Define the tone and style**\n   - Describe the desired tone.\n   - If you have a style guide, mention key points from it.\n\n   Bad prompt:\n   <prompt>\n   \"Write a product description.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"Please help me write a product description for our new ergonomic office chair. Use a professional but engaging tone. Our brand voice is friendly, innovative, and health-conscious. The description should:\n   1. Highlight the chair's key ergonomic features\n   2. Explain how these features benefit the user's health and productivity\n   3. Include a brief mention of the sustainable materials used\n   4. End with a call-to-action encouraging readers to try the chair\n\n   Aim for about 200 words.\"\n   </prompt>\n\n   Why it's better: This prompt provides clear guidance on the tone, style, and specific elements to include in the product description.\n\n3. **Define output structure**\n   - Provide a basic outline or list of points you want covered.\n\n   Bad prompt:\n   <prompt>\n   \"Create a presentation on our company results.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"I need to create a presentation on our Q2 results. Structure this with the following sections:\n   1. Overview\n   2. Sales Performance\n   3. Customer Acquisition\n   4. Challenges\n   5. Q3 Outlook\n\n   For each section, suggest 3-4 key points to cover, based on typical business presentations. Also, recommend one type of data visualization (e.g., graph, chart) that would be effective for each section.\"\n   </prompt>\n\n   Why it's better: This prompt provides a clear structure and asks for specific elements (key points and data visualizations) for each section.\n\n### Document summary and Q&A\n\n1. **Be specific about what you want**\n   - Ask for a summary of specific aspects or sections of the document.\n   - Frame your questions clearly and directly.\n   - Be sure to specify what kind of summary (output structure, content type) you want\n\n2. **Use the document names**\n   - Refer to attached documents by name.\n\n3. **Ask for citations**\n   - Request that Claude cites specific parts of the document in its answers.\n\nHere is an example that combines all three of the above techniques:\n\n   Bad prompt:\n   <prompt>\n   \"Summarize this report for me.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"I've attached a 50-page market research report called 'Tech Industry Trends 2023'. Can you provide a 2-paragraph summary focusing on AI and machine learning trends? Then, please answer these questions:\n   1. What are the top 3 AI applications in business for this year?\n   2. How is machine learning impacting job roles in the tech industry?\n   3. What potential risks or challenges does the report mention regarding AI adoption?\n\n   Please cite specific sections or page numbers when answering these questions.\"\n   </prompt>\n\n   Why it's better: This prompt specifies the exact focus of the summary, provides specific questions, and asks for citations, ensuring a more targeted and useful response. It also indicates the ideal summary output structure, such as limiting the response to 2 paragraphs.\n\n### Data analysis and visualization\n\n1. **Specify the desired format**\n   - Clearly describe the format you want the data in.\n\n   Bad prompt:\n   <prompt>\n   \"Analyze our sales data.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"I've attached a spreadsheet called 'Sales Data 2023'. Can you analyze this data and present the key findings in the following format:\n\n   1. Executive Summary (2-3 sentences)\n\n   2. Key Metrics:\n      - Total sales for each quarter\n      - Top-performing product category\n      - Highest growth region\n\n   3. Trends:\n      - List 3 notable trends, each with a brief explanation\n\n   4. Recommendations:\n      - Provide 3 data-driven recommendations, each with a brief rationale\n\n   After the analysis, suggest three types of data visualizations that would effectively communicate these findings.\"\n   </prompt>\n\n   Why it's better: This prompt provides a clear structure for the analysis, specifies key metrics to focus on, and asks for recommendations and visualization suggestions for further formatting.\n\n### Brainstorming\n 1. Use Claude to generate ideas by asking for a list of possibilities or alternatives.\n     - Be specific about what topics you want Claude to cover in its brainstorming\n\n   Bad prompt:\n   <prompt>\n   \"Give me some team-building ideas.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"We need to come up with team-building activities for our remote team of 20 people. Can you help me brainstorm by:\n   1. Suggesting 10 virtual team-building activities that promote collaboration\n   2. For each activity, briefly explain how it fosters teamwork\n   3. Indicate which activities are best for:\n      a) Ice-breakers\n      b) Improving communication\n      c) Problem-solving skills\n   4. Suggest one low-cost option and one premium option.\"\n   </prompt>\n\n   Why it's better: This prompt provides specific parameters for the brainstorming session, including the number of ideas, type of activities, and additional categorization, resulting in a more structured and useful output.\n\n2. Request responses in specific formats like bullet points, numbered lists, or tables for easier reading.\n\n   Bad Prompt:\n   <prompt>\n   \"Compare project management software options.\"\n   </prompt>\n\n   Good Prompt:\n   <prompt>\n   \"We're considering three different project management software options: Asana, Trello, and Microsoft Project. Can you compare these in a table format using the following criteria:\n   1. Key Features\n   2. Ease of Use\n   3. Scalability\n   4. Pricing (include specific plans if possible)\n   5. Integration capabilities\n   6. Best suited for (e.g., small teams, enterprise, specific industries)\"\n   </prompt>\n\n   Why it's better: This prompt requests a specific structure (table) for the comparison, provides clear criteria, making the information easy to understand and apply.\n  \n## Troubleshooting, minimizing hallucinations, and maximizing performance\n\n1. **Allow Claude to acknowledge uncertainty**\n   - Tell Claude that it should say it doesn\u2019t know if it doesn\u2019t know. Ex. \u201cIf you're unsure about something, it's okay to admit it. Just say you don\u2019t know.\u201d\n\n2. **Break down complex tasks**\n   - If a task seems too large and Claude is missing steps or not performing certain steps well, break it into smaller steps and work through them with Claude one message at a time.\n\n3. **Include all contextual information for new requests**\n   - Claude doesn't retain information from previous conversations, so include all necessary context in each new conversation.\n\n## Example good vs. bad prompt examples\n\nThese are more examples that combine multiple prompting techniques to showcase the stark difference between ineffective and highly effective prompts.\n\n### Example 1: Marketing strategy development\n\nBad prompt:\n<prompt>\n\"Help me create a marketing strategy.\"\n</prompt>\n\nGood prompt:\n<prompt>\n\"As a senior marketing consultant, I need your help developing a comprehensive marketing strategy for our new eco-friendly smartphone accessory line. Our target audience is environmentally conscious millennials and Gen Z consumers. Please provide a detailed strategy that includes:\n\n1. Market Analysis:\n   - Current trends in eco-friendly tech accessories\n   - 2-3 key competitors and their strategies\n   - Potential market size and growth projections\n\n2. Target Audience Persona:\n   - Detailed description of our ideal customer\n   - Their pain points and how our products solve them\n\n3. Marketing Mix:\n   - Product: Key features to highlight\n   - Price: Suggested pricing strategy with rationale\n   - Place: Recommended distribution channels\n   - Promotion: \n     a) 5 marketing channels to focus on, with pros and cons for each\n     b) 3 creative campaign ideas for launch\n\n4. Content Strategy:\n   - 5 content themes that would resonate with our audience\n   - Suggested content types (e.g., blog posts, videos, infographics)\n\n5. KPIs and Measurement:\n   - 5 key metrics to track\n   - Suggested tools for measuring these metrics\n\nPlease present this information in a structured format with headings and bullet points. Where relevant, explain your reasoning or provide brief examples.\n\nAfter outlining the strategy, please identify any potential challenges or risks we should be aware of, and suggest mitigation strategies for each.\"\n</prompt>\n\nWhy it's better: This prompt combines multiple techniques including role assignment, specific task breakdown, structured output request, brainstorming (for campaign ideas and content themes), and asking for explanations. It provides clear guidelines while allowing room for Claude's analysis and creativity.\n\n### Example 2: Financial report analysis\n\nBad prompt:\n<prompt>\n\"Analyze this financial report.\"\n</prompt>\n\nGood prompt:\n<prompt>\n\"I've attached our company's Q2 financial report titled 'Q2_2023_Financial_Report.pdf'. Act as a seasoned CFO and analyze this report and prepare a briefing for our board of directors. Please structure your analysis as follows:\n\n1. Executive Summary (3-4 sentences highlighting key points)\n\n2. Financial Performance Overview:\n   a) Revenue: Compare to previous quarter and same quarter last year\n   b) Profit margins: Gross and Net, with explanations for any significant changes\n   c) Cash flow: Highlight any concerns or positive developments\n\n3. Key Performance Indicators:\n   - List our top 5 KPIs and their current status (Use a table format)\n   - For each KPI, provide a brief explanation of its significance and any notable trends\n\n4. Segment Analysis:\n   - Break down performance by our three main business segments\n   - Identify the best and worst performing segments, with potential reasons for their performance\n\n5. Balance Sheet Review:\n   - Highlight any significant changes in assets, liabilities, or equity\n   - Calculate and interpret key ratios (e.g., current ratio, debt-to-equity)\n\n6. Forward-Looking Statements:\n   - Based on this data, provide 3 key predictions for Q3\n   - Suggest 2-3 strategic moves we should consider to improve our financial position\n\n7. Risk Assessment:\n   - Identify 3 potential financial risks based on this report\n   - Propose mitigation strategies for each risk\n\n8. Peer Comparison:\n   - Compare our performance to 2-3 key competitors (use publicly available data)\n   - Highlight areas where we're outperforming and areas for improvement\n\nPlease use charts or tables where appropriate to visualize data. For any assumptions or interpretations you make, please clearly state them and provide your reasoning.\n\nAfter completing the analysis, please generate 5 potential questions that board members might ask about this report, along with suggested responses.\n\nFinally, summarize this entire analysis into a single paragraph that I can use as an opening statement in the board meeting.\"\n</prompt>\n\nWhy it's better: This prompt combines role-playing (as CFO), structured output, specific data analysis requests, predictive analysis, risk assessment, comparative analysis, and even anticipates follow-up questions. It provides a clear framework while encouraging deep analysis and strategic thinking.\n",
                "created_at": "2024-06-25T16:48:39.519963+00:00"
            }
        ]
    },
    {
        "uuid": "d1c8f55a-9672-49a1-86c3-4a305b59352e",
        "name": "How to use Claude",
        "description": "An example project that also doubles as a how-to guide for using Claude. Chat with it to learn more about how to get the most out of chatting with Claude!",
        "is_private": false,
        "is_starter_project": true,
        "prompt_template": "",
        "created_at": "2024-09-02T18:34:59.121125+00:00",
        "updated_at": "2024-09-02T18:34:59.121125+00:00",
        "creator": {
            "uuid": "83861058-e02f-410d-a3bd-d92f72faab0e",
            "full_name": "Nobody"
        },
        "docs": [
            {
                "uuid": "e13c35f8-3be5-4f83-b408-f79e5cdc8b9e",
                "filename": "Claude prompting guide.md",
                "content": " # Claude prompting guide\n\n## General tips for effective prompting\n\n### 1. Be clear and specific\n   - Clearly state your task or question at the beginning of your message.\n   - Provide context and details to help Claude understand your needs.\n   - Break complex tasks into smaller, manageable steps.\n\n   Bad prompt:\n   <prompt>\n   \"Help me with a presentation.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"I need help creating a 10-slide presentation for our quarterly sales meeting. The presentation should cover our Q2 sales performance, top-selling products, and sales targets for Q3. Please provide an outline with key points for each slide.\"\n   </prompt>\n\n   Why it's better: The good prompt provides specific details about the task, including the number of slides, the purpose of the presentation, and the key topics to be covered.\n\n### 2. Use examples\n   - Provide examples of the kind of output you're looking for.\n   - If you want a specific format or style, show Claude an example.\n\n   Bad prompt:\n   <prompt>\n   \"Write a professional email.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"I need to write a professional email to a client about a project delay. Here's a similar email I've sent before:\n\n   'Dear [Client],\n   I hope this email finds you well. I wanted to update you on the progress of [Project Name]. Unfortunately, we've encountered an unexpected issue that will delay our completion date by approximately two weeks. We're working diligently to resolve this and will keep you updated on our progress.\n   Please let me know if you have any questions or concerns.\n   Best regards,\n   [Your Name]'\n\n   Help me draft a new email following a similar tone and structure, but for our current situation where we're delayed by a month due to supply chain issues.\"\n   </prompt>\n\n   Why it's better: The good prompt provides a concrete example of the desired style and tone, giving Claude a clear reference point for the new email.\n\n### 3. Encourage thinking\n   - For complex tasks, ask Claude to \"think step-by-step\" or \"explain your reasoning.\"\n   - This can lead to more accurate and detailed responses.\n\n   Bad prompt:\n   <prompt>\n   \"How can I improve team productivity?\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"I'm looking to improve my team's productivity. Think through this step-by-step, considering the following factors:\n   1. Current productivity blockers (e.g., too many meetings, unclear priorities)\n   2. Potential solutions (e.g., time management techniques, project management tools)\n   3. Implementation challenges\n   4. Methods to measure improvement\n\n   For each step, please provide a brief explanation of your reasoning. Then summarize your ideas at the end.\"\n   </prompt>\n\n   Why it's better: The good prompt asks Claude to think through the problem systematically, providing a guided structure for the response and asking for explanations of the reasoning process. It also prompts Claude to create a summary at the end for easier reading.\n\n### 4. Iterative refinement\n   - If Claude's first response isn't quite right, ask for clarifications or modifications.\n   - You can always say \"That's close, but can you adjust X to be more like Y?\"\n\n   Bad prompt:\n   <prompt>\n   \"Make it better.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"That\u2019s a good start, but please refine it further. Make the following adjustments:\n   1. Make the tone more casual and friendly\n   2. Add a specific example of how our product has helped a customer\n   3. Shorten the second paragraph to focus more on the benefits rather than the features\"\n   </prompt>\n\n   Why it's better: The good prompt provides specific feedback and clear instructions for improvements, allowing Claude to make targeted adjustments instead of just relying on Claude\u2019s innate sense of what \u201cbetter\u201d might be \u2014 which is likely different from the user\u2019s definition!\n\n### 5. Leverage Claude's knowledge\n   - Claude has broad knowledge across many fields. Don't hesitate to ask for explanations or background information\n   - Be sure to include relevant context and details so that Claude\u2019s response is maximally targeted to be helpful\n\n   Bad prompt:\n   <prompt>\n   \"What is marketing? How do I do it?\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"I'm developing a marketing strategy for a new eco-friendly cleaning product line. Can you provide an overview of current trends in green marketing? Please include:\n   1. Key messaging strategies that resonate with environmentally conscious consumers\n   2. Effective channels for reaching this audience\n   3. Examples of successful green marketing campaigns from the past year\n   4. Potential pitfalls to avoid (e.g., greenwashing accusations)\n\n   This information will help me shape our marketing approach.\"\n   </prompt>\n\n   Why it's better: The good prompt asks for specific, contextually relevant  information that leverages Claude's broad knowledge base. It provides context for how the information will be used, which helps Claude frame its answer in the most relevant way.\n\n### 6. Use role-playing\n   - Ask Claude to adopt a specific role or perspective when responding.\n\n   Bad prompt:\n   <prompt>\n   \"Help me prepare for a negotiation.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"You are a fabric supplier for my backpack manufacturing company. I'm preparing for a negotiation with this supplier to reduce prices by 10%. As the supplier, please provide:\n   1. Three potential objections to our request for a price reduction\n   2. For each objection, suggest a counterargument from my perspective\n   3. Two alternative proposals the supplier might offer instead of a straight price cut\n\n   Then, switch roles and provide advice on how I, as the buyer, can best approach this negotiation to achieve our goal.\"\n   </prompt>\n\n   Why it's better: This prompt uses role-playing to explore multiple perspectives of the negotiation, providing a more comprehensive preparation. Role-playing also encourages Claude to more readily adopt the nuances of specific perspectives, increasing the intelligence and performance of Claude\u2019s response.\n\n\n## Task-specific tips and examples\n\n### Content Creation\n\n1. **Specify your audience**\n   - Tell Claude who the content is for.\n\n   Bad prompt:\n   <prompt>\n   \"Write something about cybersecurity.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"I need to write a blog post about cybersecurity best practices for small business owners. The audience is not very tech-savvy, so the content should be:\n   1. Easy to understand, avoiding technical jargon where possible\n   2. Practical, with actionable tips they can implement quickly\n   3. Engaging and slightly humorous to keep their interest\n\n   Please provide an outline for a 1000-word blog post that covers the top 5 cybersecurity practices these business owners should adopt.\"\n   </prompt>\n\n   Why it's better: The good prompt specifies the audience, desired tone, and key characteristics of the content, giving Claude clear guidelines for creating appropriate and effective output.\n\n2. **Define the tone and style**\n   - Describe the desired tone.\n   - If you have a style guide, mention key points from it.\n\n   Bad prompt:\n   <prompt>\n   \"Write a product description.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"Please help me write a product description for our new ergonomic office chair. Use a professional but engaging tone. Our brand voice is friendly, innovative, and health-conscious. The description should:\n   1. Highlight the chair's key ergonomic features\n   2. Explain how these features benefit the user's health and productivity\n   3. Include a brief mention of the sustainable materials used\n   4. End with a call-to-action encouraging readers to try the chair\n\n   Aim for about 200 words.\"\n   </prompt>\n\n   Why it's better: This prompt provides clear guidance on the tone, style, and specific elements to include in the product description.\n\n3. **Define output structure**\n   - Provide a basic outline or list of points you want covered.\n\n   Bad prompt:\n   <prompt>\n   \"Create a presentation on our company results.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"I need to create a presentation on our Q2 results. Structure this with the following sections:\n   1. Overview\n   2. Sales Performance\n   3. Customer Acquisition\n   4. Challenges\n   5. Q3 Outlook\n\n   For each section, suggest 3-4 key points to cover, based on typical business presentations. Also, recommend one type of data visualization (e.g., graph, chart) that would be effective for each section.\"\n   </prompt>\n\n   Why it's better: This prompt provides a clear structure and asks for specific elements (key points and data visualizations) for each section.\n\n### Document summary and Q&A\n\n1. **Be specific about what you want**\n   - Ask for a summary of specific aspects or sections of the document.\n   - Frame your questions clearly and directly.\n   - Be sure to specify what kind of summary (output structure, content type) you want\n\n2. **Use the document names**\n   - Refer to attached documents by name.\n\n3. **Ask for citations**\n   - Request that Claude cites specific parts of the document in its answers.\n\nHere is an example that combines all three of the above techniques:\n\n   Bad prompt:\n   <prompt>\n   \"Summarize this report for me.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"I've attached a 50-page market research report called 'Tech Industry Trends 2023'. Can you provide a 2-paragraph summary focusing on AI and machine learning trends? Then, please answer these questions:\n   1. What are the top 3 AI applications in business for this year?\n   2. How is machine learning impacting job roles in the tech industry?\n   3. What potential risks or challenges does the report mention regarding AI adoption?\n\n   Please cite specific sections or page numbers when answering these questions.\"\n   </prompt>\n\n   Why it's better: This prompt specifies the exact focus of the summary, provides specific questions, and asks for citations, ensuring a more targeted and useful response. It also indicates the ideal summary output structure, such as limiting the response to 2 paragraphs.\n\n### Data analysis and visualization\n\n1. **Specify the desired format**\n   - Clearly describe the format you want the data in.\n\n   Bad prompt:\n   <prompt>\n   \"Analyze our sales data.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"I've attached a spreadsheet called 'Sales Data 2023'. Can you analyze this data and present the key findings in the following format:\n\n   1. Executive Summary (2-3 sentences)\n\n   2. Key Metrics:\n      - Total sales for each quarter\n      - Top-performing product category\n      - Highest growth region\n\n   3. Trends:\n      - List 3 notable trends, each with a brief explanation\n\n   4. Recommendations:\n      - Provide 3 data-driven recommendations, each with a brief rationale\n\n   After the analysis, suggest three types of data visualizations that would effectively communicate these findings.\"\n   </prompt>\n\n   Why it's better: This prompt provides a clear structure for the analysis, specifies key metrics to focus on, and asks for recommendations and visualization suggestions for further formatting.\n\n### Brainstorming\n 1. Use Claude to generate ideas by asking for a list of possibilities or alternatives.\n     - Be specific about what topics you want Claude to cover in its brainstorming\n\n   Bad prompt:\n   <prompt>\n   \"Give me some team-building ideas.\"\n   </prompt>\n\n   Good prompt:\n   <prompt>\n   \"We need to come up with team-building activities for our remote team of 20 people. Can you help me brainstorm by:\n   1. Suggesting 10 virtual team-building activities that promote collaboration\n   2. For each activity, briefly explain how it fosters teamwork\n   3. Indicate which activities are best for:\n      a) Ice-breakers\n      b) Improving communication\n      c) Problem-solving skills\n   4. Suggest one low-cost option and one premium option.\"\n   </prompt>\n\n   Why it's better: This prompt provides specific parameters for the brainstorming session, including the number of ideas, type of activities, and additional categorization, resulting in a more structured and useful output.\n\n2. Request responses in specific formats like bullet points, numbered lists, or tables for easier reading.\n\n   Bad Prompt:\n   <prompt>\n   \"Compare project management software options.\"\n   </prompt>\n\n   Good Prompt:\n   <prompt>\n   \"We're considering three different project management software options: Asana, Trello, and Microsoft Project. Can you compare these in a table format using the following criteria:\n   1. Key Features\n   2. Ease of Use\n   3. Scalability\n   4. Pricing (include specific plans if possible)\n   5. Integration capabilities\n   6. Best suited for (e.g., small teams, enterprise, specific industries)\"\n   </prompt>\n\n   Why it's better: This prompt requests a specific structure (table) for the comparison, provides clear criteria, making the information easy to understand and apply.\n  \n## Troubleshooting, minimizing hallucinations, and maximizing performance\n\n1. **Allow Claude to acknowledge uncertainty**\n   - Tell Claude that it should say it doesn\u2019t know if it doesn\u2019t know. Ex. \u201cIf you're unsure about something, it's okay to admit it. Just say you don\u2019t know.\u201d\n\n2. **Break down complex tasks**\n   - If a task seems too large and Claude is missing steps or not performing certain steps well, break it into smaller steps and work through them with Claude one message at a time.\n\n3. **Include all contextual information for new requests**\n   - Claude doesn't retain information from previous conversations, so include all necessary context in each new conversation.\n\n## Example good vs. bad prompt examples\n\nThese are more examples that combine multiple prompting techniques to showcase the stark difference between ineffective and highly effective prompts.\n\n### Example 1: Marketing strategy development\n\nBad prompt:\n<prompt>\n\"Help me create a marketing strategy.\"\n</prompt>\n\nGood prompt:\n<prompt>\n\"As a senior marketing consultant, I need your help developing a comprehensive marketing strategy for our new eco-friendly smartphone accessory line. Our target audience is environmentally conscious millennials and Gen Z consumers. Please provide a detailed strategy that includes:\n\n1. Market Analysis:\n   - Current trends in eco-friendly tech accessories\n   - 2-3 key competitors and their strategies\n   - Potential market size and growth projections\n\n2. Target Audience Persona:\n   - Detailed description of our ideal customer\n   - Their pain points and how our products solve them\n\n3. Marketing Mix:\n   - Product: Key features to highlight\n   - Price: Suggested pricing strategy with rationale\n   - Place: Recommended distribution channels\n   - Promotion: \n     a) 5 marketing channels to focus on, with pros and cons for each\n     b) 3 creative campaign ideas for launch\n\n4. Content Strategy:\n   - 5 content themes that would resonate with our audience\n   - Suggested content types (e.g., blog posts, videos, infographics)\n\n5. KPIs and Measurement:\n   - 5 key metrics to track\n   - Suggested tools for measuring these metrics\n\nPlease present this information in a structured format with headings and bullet points. Where relevant, explain your reasoning or provide brief examples.\n\nAfter outlining the strategy, please identify any potential challenges or risks we should be aware of, and suggest mitigation strategies for each.\"\n</prompt>\n\nWhy it's better: This prompt combines multiple techniques including role assignment, specific task breakdown, structured output request, brainstorming (for campaign ideas and content themes), and asking for explanations. It provides clear guidelines while allowing room for Claude's analysis and creativity.\n\n### Example 2: Financial report analysis\n\nBad prompt:\n<prompt>\n\"Analyze this financial report.\"\n</prompt>\n\nGood prompt:\n<prompt>\n\"I've attached our company's Q2 financial report titled 'Q2_2023_Financial_Report.pdf'. Act as a seasoned CFO and analyze this report and prepare a briefing for our board of directors. Please structure your analysis as follows:\n\n1. Executive Summary (3-4 sentences highlighting key points)\n\n2. Financial Performance Overview:\n   a) Revenue: Compare to previous quarter and same quarter last year\n   b) Profit margins: Gross and Net, with explanations for any significant changes\n   c) Cash flow: Highlight any concerns or positive developments\n\n3. Key Performance Indicators:\n   - List our top 5 KPIs and their current status (Use a table format)\n   - For each KPI, provide a brief explanation of its significance and any notable trends\n\n4. Segment Analysis:\n   - Break down performance by our three main business segments\n   - Identify the best and worst performing segments, with potential reasons for their performance\n\n5. Balance Sheet Review:\n   - Highlight any significant changes in assets, liabilities, or equity\n   - Calculate and interpret key ratios (e.g., current ratio, debt-to-equity)\n\n6. Forward-Looking Statements:\n   - Based on this data, provide 3 key predictions for Q3\n   - Suggest 2-3 strategic moves we should consider to improve our financial position\n\n7. Risk Assessment:\n   - Identify 3 potential financial risks based on this report\n   - Propose mitigation strategies for each risk\n\n8. Peer Comparison:\n   - Compare our performance to 2-3 key competitors (use publicly available data)\n   - Highlight areas where we're outperforming and areas for improvement\n\nPlease use charts or tables where appropriate to visualize data. For any assumptions or interpretations you make, please clearly state them and provide your reasoning.\n\nAfter completing the analysis, please generate 5 potential questions that board members might ask about this report, along with suggested responses.\n\nFinally, summarize this entire analysis into a single paragraph that I can use as an opening statement in the board meeting.\"\n</prompt>\n\nWhy it's better: This prompt combines role-playing (as CFO), structured output, specific data analysis requests, predictive analysis, risk assessment, comparative analysis, and even anticipates follow-up questions. It provides a clear framework while encouraging deep analysis and strategic thinking.\n",
                "created_at": "2024-09-02T18:34:59.121125+00:00"
            }
        ]
    },
    {
        "uuid": "64f835bf-9407-4ef4-a2bd-7ef6193879da",
        "name": "331 h2q3",
        "description": "i have the following python code which implements the gale shapley algorithm, and I need to refactor it as such that it fits the specifications of a different project. I will be providing my implementation, and then, the files from the new project, into which i need to implement the algorithm into.\n",
        "is_private": true,
        "is_starter_project": false,
        "prompt_template": "",
        "created_at": "2024-09-24T01:10:37.900249+00:00",
        "updated_at": "2024-09-24T01:10:37.900249+00:00",
        "creator": {
            "uuid": "83861058-e02f-410d-a3bd-d92f72faab0e",
            "full_name": "Nobody"
        },
        "docs": [
            {
                "uuid": "41bf6af7-3629-43db-aa94-a0984354b775",
                "filename": "Marriage.py",
                "content": "class Marriage:\n\n    def __init__(self, male_val, female_val):\n        self.m = male_val\n        self.w = female_val\n\n    def set_man(self, male_val):\n        self.m = male_val\n\n    def set_woman(self, female_val):\n        self.w = female_val\n\n    def man(self):\n        return self.m\n    def woman(self):\n        return self.w\n\n    def equals(self, marriage):\n        return (marriage.man() == self.m) and (marriage.woman() == self.w)\n\n    def __str__(self):\n        return \"(\" + str(self.m) + \", \" + str(self.w) + \")\"\n\n    __repr__ = __str__\n\n    def __lt__(self, other):\n        return self.w < other.woman()\n\n    def __eq__(self, other):\n        return self.w == other.woman() and self.m == other.man()\n",
                "created_at": "2024-09-24T02:49:18.011000+00:00"
            },
            {
                "uuid": "4cba8d38-e5f7-426a-91db-e47e90b84f78",
                "filename": "PreferenceLists.py",
                "content": "class PreferenceLists:\n\n    def __init__(self, student_preferences, hospital_preferences, hospital_open_slots):\n        self.student_preferences = student_preferences\n        self.hospital_preferences = hospital_preferences\n        self.hospital_open_slots = hospital_open_slots\n",
                "created_at": "2024-09-24T02:49:31.379923+00:00"
            },
            {
                "uuid": "c27929f8-24b3-4cd5-ba8a-3b56fa9aa33c",
                "filename": "Solution.py",
                "content": "from Marriage import Marriage\n\nclass Solution:\n\n    def __init__(self, number, women, men):\n        \"\"\"\n        The constructor exists only to initialize variables. You do not need to change it.\n        :param number: The number of members\n        :param men: The preference list of men, as a dictionary.\n        :param women: The preference list of the women, as a dictionary.\n        \"\"\"\n        self.num = number\n        self.men = men\n        self.women = women\n        self.count = 0\n        self.stable_matchings = []\n\n    def output_stable_matchings(self):\n        \"\"\"\n        This method both computes and returns the stable matchings\n        :return: the list of stable matchings\n        \"\"\"\n        engagements = {}\n        free_men = list(self.men.keys())\n\n        while free_men:\n            man = free_men.pop(0)\n            for woman in self.men[man]:\n                if woman not in engagements:\n                    engagements[woman] = man\n                    break\n                else:\n                    current_man = engagements[woman]\n                    if self.women[woman].index(man) < self.women[woman].index(current_man):\n                        free_men.append(current_man)\n                        engagements[woman] = man\n                        break\n\n        # Convert engagements to list of Marriage objects\n        stable_matching = [Marriage(man, woman) for woman, man in engagements.items()]\n        self.stable_matchings.append(stable_matching)\n\n        return self.stable_matchings\n",
                "created_at": "2024-09-24T02:49:21.137498+00:00"
            },
            {
                "uuid": "893d6209-2c4a-462d-a93f-7ee23d95e9eb",
                "filename": "Match.py",
                "content": "class Match:\n\n    def __init__(self, hospital_val, student_val):\n        self.hospital = hospital_val\n        self.student = student_val\n\n    def __str__(self):\n        return \"({}, {})\".format(self.hospital, self.student)\n\n    __repr__ = __str__\n\n    def __lt__(self, other):\n        return self.hospital < other.hospital\n\n    def __eq__(self, other):\n        return self.student == other.student and self.hospital == other.hospital\n\n    def equals(self, match):\n        return self == match\n",
                "created_at": "2024-09-24T02:49:28.654178+00:00"
            }
        ]
    },
    {
        "uuid": "aedb2170-5747-4e74-8031-ed10118a37fb",
        "name": "pa5 final run",
        "description": "",
        "is_private": true,
        "is_starter_project": false,
        "prompt_template": "the attachment `pa5_text` stands for \"programming assignment 5\" and it contains the instructions for the project.\n\n`csesem.h` and `csesem.c` implement cse_semaphore. `pcq.h` and `pcq.c` implement the product-consumer queue. These are the source files of the project we start off with. Review these attachments before proceeding.",
        "created_at": "2024-11-30T09:01:00.813282+00:00",
        "updated_at": "2024-12-06T03:35:52.284447+00:00",
        "creator": {
            "uuid": "83861058-e02f-410d-a3bd-d92f72faab0e",
            "full_name": "Nobody"
        },
        "docs": [
            {
                "uuid": "55a93ee8-5e06-4e97-a6bb-a06bf481a053",
                "filename": "csesem.h",
                "content": "#ifndef CSESEM_H_\n#define CSESEM_H_\n\n/* The CSE_Semaphore structure is an example of how encapsulation is\n * often implemented in C.  This header defines a CSE_Semaphore as a\n * pointer to type struct CSE_Semaphore, but does not define the struct\n * in this file.  It is valid in C to declare a pointer to a structure\n * for which there is no definition _as long as you never dereference\n * the pointer_.  The pointer then becomes what is called an opaque\n * type; the code using the pointer knows that there is some data stored\n * there, but cannot access it.\n *\n * The implementation file contains a definition for the struct, and can\n * therefore access its contents.\n *\n * This is sometimes accomplished by using the type void *, but the\n * technique used here is more type safe.\n */\ntypedef struct CSE_Semaphore *CSE_Semaphore;\n\n/* Create a CSE_Semaphore with the initial value count.  This function\n * should return NULL if the semaphore cannot be created for some\n * reason. (E.g., count is negative, an initialization function returns\n * an error, etc.) */\nCSE_Semaphore csesem_create(int count);\n\n/* Post on a CSE_Semaphore.  This will increase the count on the\n * semaphore, and notify a waiting task if any such task exists. */\nvoid csesem_post(CSE_Semaphore sem);\n\n/* Wait on a CSE_Semaphore.  If the count on this semaphore is greater\n * than zero, it will decrement the count and return immediately.  If\n * the count is zero, csesem_wait() will wait until the count is\n * greater than zero, then decrement the count and return. */\nvoid csesem_wait(CSE_Semaphore sem);\n\n/* Destroy a CSE_Semaphore, releasing any resources it may be using.\n * After calling this function, any access to the semaphore is an\n * invalid operation.  Your code does not need to check for access to an\n * invalid semaphore.  (Because there's no safe way to do so once it's\n * freed!) */\nvoid csesem_destroy(CSE_Semaphore sem);\n\n#endif /* CSESEM_H_ */\n",
                "created_at": "2024-11-30T09:23:27.985101+00:00"
            },
            {
                "uuid": "3ecd3d9f-2068-4b86-b0c0-f764f6137d2e",
                "filename": "pcq.c",
                "content": "#include \"pcq.h\"\n\n#include <pthread.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n#include \"csesem.h\"\n\nstruct PCQueue {\n    int slots;\n    int head;\n    int tail;\n    int count;\n    void **queue;\n    pthread_mutex_t lock;\n    CSE_Semaphore empty;\n    CSE_Semaphore full;\n    int destroyed;\n};\n\nPCQueue pcq_create(int slots) {\n    if (slots <= 0)\n        return NULL;  // Keep this since it's explicitly in the API spec\n    PCQueue pcq = calloc(1, sizeof(*pcq));\n    pcq->queue = calloc(slots, sizeof(void *));\n    pcq->slots = slots;\n    pthread_mutex_init(&pcq->lock, NULL);\n    pcq->empty = csesem_create(slots);\n    pcq->full = csesem_create(0);\n    return pcq;\n}\n\nvoid pcq_insert(PCQueue pcq, void *data) {\n    csesem_wait(pcq->empty);\n    pthread_mutex_lock(&pcq->lock);\n\n    if (pcq->destroyed) {\n        pthread_mutex_unlock(&pcq->lock);\n        return;\n    }\n\n    pcq->queue[pcq->tail] = data;\n    pcq->tail = (pcq->tail + 1) % pcq->slots;\n    pcq->count++;\n\n    pthread_mutex_unlock(&pcq->lock);\n    csesem_post(pcq->full);\n}\n\nvoid *pcq_retrieve(PCQueue pcq) {\n    void *data;\n    csesem_wait(pcq->full);\n    pthread_mutex_lock(&pcq->lock);\n\n    if (pcq->destroyed) {\n        pthread_mutex_unlock(&pcq->lock);\n        return NULL;\n    }\n\n    data = pcq->queue[pcq->head];\n    pcq->head = (pcq->head + 1) % pcq->slots;\n    pcq->count--;\n\n    pthread_mutex_unlock(&pcq->lock);\n    csesem_post(pcq->empty);\n    return data;\n}\n\nvoid pcq_destroy(PCQueue pcq) {\n    pthread_mutex_lock(&pcq->lock);\n    pcq->destroyed = 1;\n    pthread_mutex_unlock(&pcq->lock);\n\n    for (int i = 0; i < pcq->slots; i++) {\n        csesem_post(pcq->full);\n        csesem_post(pcq->empty);\n    }\n    usleep(1000);\n    csesem_destroy(pcq->empty);\n    csesem_destroy(pcq->full);\n    pthread_mutex_destroy(&pcq->lock);\n    free(pcq->queue);\n    free(pcq);\n}",
                "created_at": "2024-12-06T04:40:34.379809+00:00"
            },
            {
                "uuid": "5b25f1d6-5703-494e-9dd5-25f662e1148d",
                "filename": "csesem.c",
                "content": "#include \"csesem.h\"\n\n#include <pthread.h>\n#include <stdlib.h>\n\nstruct CSE_Semaphore {\n    int value;\n    pthread_mutex_t lock;\n    pthread_cond_t cond;\n};\n\nCSE_Semaphore csesem_create(int count) {\n    if (count < 0)\n        return NULL;  // Keep this since it's explicitly in the API spec\n    CSE_Semaphore sem = malloc(sizeof(struct CSE_Semaphore));\n    sem->value = count;\n    pthread_mutex_init(&sem->lock, NULL);\n    pthread_cond_init(&sem->cond, NULL);\n    return sem;\n}\n\nvoid csesem_post(CSE_Semaphore sem) {\n    pthread_mutex_lock(&sem->lock);\n    sem->value++;\n    pthread_cond_signal(&sem->cond);\n    pthread_mutex_unlock(&sem->lock);\n}\n\nvoid csesem_wait(CSE_Semaphore sem) {\n    pthread_mutex_lock(&sem->lock);\n    while (sem->value <= 0) {\n        pthread_cond_wait(&sem->cond, &sem->lock);\n    }\n    sem->value--;\n    pthread_mutex_unlock(&sem->lock);\n}\n\nvoid csesem_destroy(CSE_Semaphore sem) {\n    pthread_mutex_destroy(&sem->lock);\n    pthread_cond_destroy(&sem->cond);\n    free(sem);\n}",
                "created_at": "2024-12-06T04:40:34.219037+00:00"
            },
            {
                "uuid": "297a671c-626d-4159-92ce-2477da9ec4b0",
                "filename": "pcq.h",
                "content": "#ifndef PCQ_H_\n#define PCQ_H_\n\n/* This is another encapsulated data type as described in the handout\n * and csesem.h.  The implementation file contains a definition for this\n * struct.\n */\ntypedef struct PCQueue *PCQueue;\n\n/* Create a PCQueue with the specified number of slots.  This queue must\n * accept slots insertions with no intervening retrievals before an\n * insertion would block, and must block any insertions after slots\n * insertions until at least one item is retrieved.\n *\n * This function should return NULL if initialization cannot be\n * accomplished (for example, if slots is <= 0 or if memory allocation\n * or other initializations fail).*/\nPCQueue pcq_create(int slots);\n\n/* Insert a single item into pcq.  This method should succeed\n * immediately if there is at least one available slot in the queue, and\n * block until a slot becomes available, otherwise.  You may assume\n * that, at the time that pcq_insert() is called, pcq is a queue\n * returned by a successful call to pcq_create() and that pcq_destroy()\n * has not yet been called on it.\n *\n * If the queue pcq is destroyed before this insert can complete, this\n * function should return with no effect.\n */\nvoid pcq_insert(PCQueue pcq, void *data);\n\n/* Remove a single item from pcq.  This method should succeed\n * immediately and return the retrieved item if there is at least one\n * available item in the queue, and block until an item is available\n * otherwise.  You may assume that, at the time that pcq_retrieve() is\n * called, pcq is a queue returned by a successful call to pcq_create()\n * and that pcq_destroy() has not yet been called on it.\n *\n * If the queue pcq is destroyed before this retrieval can complete,\n * this function should return NULL.\n */\nvoid *pcq_retrieve(PCQueue pcq);\n\n/* Destroy the PCQueue pcq, releasing any resources it may be using.  If\n * any threads are blocked on pcq_insert() or pcq_retrieve(), they\n * should be released according to the documentation for their\n * respective functions before the synchronization primitives and memory\n * for pcq are destroyed/released.  Once this function returns, any\n * access to pcq is invalid.  Your code does not need to check for\n * access to an invalid queue.\n */\nvoid pcq_destroy(PCQueue pcq);\n\n#endif /* PCQ_H_ */\n",
                "created_at": "2024-11-30T09:23:27.846297+00:00"
            },
            {
                "uuid": "a82c3f05-c0c4-4d81-a886-61e789a279c9",
                "filename": "pa5_text.txt",
                "content": "Programming Assignment 5: Synchronization: Semaphores and producer consumer Queues\nCSE 220: Systems Programming\nIntroduction\nThis assignment will require you to implement a semaphore using mutexes and condition variables, then use your semaphore to implement a producer/consumer queue (FIFO) data structure for passing data between threads. You will use POSIX mutexes, condition variables, and threads in this project.\n1_Getting Started\nThe given code for this project contains two source files that you will have to modify, src/csesem.c and src/pcq.c, as well as two header files, src/csesem.h and src/pcq.h that you should not modify. It also contains the source for five tests (two for the semaphore and three for the producer consumer queue) that will run when you invoke make test. When you finish reading this handout, you should read both header files, the given tests, and the given sources before you begin implementation. You will find a variety of advice and clarifying comments in the given code.\n\n2_Semaphores\nThe first part of this project requires you to implement a semaphore called CSE_Semaphore using the API defined in src/csesem.h. There are extensive comments in this file explaining the API and its usage. Your semaphore will be tested directly, and it will also be used as a tool for implementing the second part of this project.\nYou will find information on semaphores in the lecture slides, and Operating Systems: Three Easy Pieces (OSTEP) contains a detailed description of semaphores with some examples of how to use them correctly in Chapter 31. You should read Chapters 30 and 31 of OSTEP carefully before starting this project, and refer to it as necessary during your implementation. In particular, you will find the producer consumer problem that is described in detail in Chapter 30 with example code in Figures 30.7 through 30.14 very useful. You may be able to use this code in your implementation with some modifications.\nAn efficient semaphore can be created using a mutex and a condition variable. You should implement the semaphore for this project in precisely that fashion.\nYou MUST NOT use POSIX semaphores in your implementation of CSE_Semaphore. \n2.1_POSIX_Mutexes\nThe Pthread mutex API has some complicated options, but you will not need them for this project. In particular, you do not need to use mutex attributes, and can pass NULL for any pointer to pthread_mutex_attr_t. You should only need the functions pthread_mutex_init() [3], pthread_mutex_lock() [3], pthread_mutex_unlock() [3], and pthread_mutex_destroy() [3].\nNote that POSIX mutexes are declared as type pthread_mutex_t, and then a pointer to the declared variable is passed to the functions that manipulate the mutex. See tests/counting_semaphore.c for an example of a typical mutex initialization and interaction.\n2.2_POSIX_Condition Variables\nThe condition variables provided with Pthreads are likewise more complicated than you will need. You may use NULL for condition variable attributes, as well, and you will not need the timed wait facility. You will use pthread_cond_init() [3], pthread_cond_wait() [3], pthread_cond_signal() [3], and possibly pthread_cond_broadcast() [3].\nLike mutexes, POSIX condition variables are declared as their type (pthread_cond_t) and manipulated as the address of the declared variable. The provided test tests/counting_semaphores.c and tests/synchronous_work.c contains examples of typical interactions with condition variables. In your semaphore implementation, you will need to utilize a condition variable to allow threadswhich are blocking on the semaphore towait without busywaiting, but be awoken when they can safely enter the semaphore.\nA typical use of a condition variable looks like these examples from tests/counting_semaphore.c; the first waits on a condition variable, and the second signals it:\n\n/* Waiting */\npthread_mutex_lock (&lock); \nwhile (!quit) {\npthread_cond_wait (&done , &lock); }\npthread_mutex_unlock (&lock);\n/* Signaling */ \npthread_mutex_lock (&lock); \nquit = 1; \npthread_mutex_unlock (&lock); \npthread_cond_broadcast (&done);\n\nObviously, these two operations would have to be executed in different threads for this code to make sense!\n\n3_producer_consumer_Queues\nThe second part of this project requires you to use the semaphore that you created (and likely other synchronization tools) to implement a producer consumer queue implementing the API found in src/pcq.h. This is a logical construction providing two basic operations:\n\u2022 A producer can add an item to the queue. If there is room on the queue, this itemwill immediately be added, where it will wait to be retrieved by a consumer. If there is no room on the queue, the producer will block until room is available, and then insert its item normally. Each item is added to the tail of the queue.\n\u2022 A consumer can remove an item from the queue. If at least one item is available on the queue, the consumer will immediately remove one item from the head of the queue and return it. If no items are available on the queue, the consumer will block until a producer places an item on the queue.\nNote that, because every producer places items on the tail of the queue and every consumer retrieves from the head, this provides first in first out (FIFO) semantics for items placed on the queue. The first item produced will be the first item consumed, and so on and so forth.\nYour implementation does not need to guarantee any particular ordering between different producers or consumers, but it does need to guarantee that all items placed on the queue by the same producer are placed in the order that theywere inserted, and that all items on the queue are removed in the order they were inserted. This means that you do not have to do anything special when waking threads that are blocked on the semaphore, you can simply allow the Pthreads implementation to wake whichever thread it wakes.\nThe item stored in each slot of your producer consumer queue is a single pointer of type void *. You may use this to store a pointer to any data structure, or to store an integer by casting the integer to and from void * when using the queue.\nThere is an example of producer consumer queues in OSTEP Chapter 30. You will not be able to use the example code from the text directly because it uses global variables (rather than created structures) and because it stores integers.\n3.1_Pointer_typedefs_and_Encapsulation\nThe data structure types in this project use typedef. In particular, the following typedefs appear in the given headers:\ntypedef struct CSE_Semaphore *CSE_Semaphore; typedef struct PCQueue *PCQueue;\nThis allows code that uses these types to be less verbose and more clear in its actual purpose. You may use these typedefs anywhere in your implementation and tests.\nAnother benefit of this construction is that the public interfaces for your semaphore and producer consumer queues speak in terms only of pointers to structures which are not defined in the public interface. This provides encapsulation of your implementation; no code external to csesem.c can manipulate the inner data structures of your semaphore, and no code external to pcq.c can manipulate the inner data structure of your producer consumer queue. This technique is often used in C. You can find more information about this technique and how it is used in this project in the respective headers.\n3.2 Partial Implementation\nIf your CSE_Semaphore implementation is sufficiently incomplete that it prevents your PCQueue from being completed, youmaychoose tousePOSIXsemaphores to implementyourPCQueue, in return foragradingpenalty. You may not use POSIX semaphores to implement CSE_Semaphore! The grading penalty is described below, in Section 7.\t\n4_Coordinated_Destruction_of_Resources\nThe destruction of resources in a multithreaded environment, and particularly the destruction of synchronization mechanisms, is fraught with peril. It is very easy to find yourself with an implementation that inadvertently accesses released resources or freed memory during the process of destroying synchronization tools.\nThink carefully about what resources are accessed when and by which threads, and arrange your code to ensure that all threads that might access a resource are notified that it is going to be destroyed and have been given an opportunity to release it before it is actually destroyed. You may find flags or counters in conjunction with condition variables useful for coordinating destruction of your producer consumer queue, in particular.\n5_Memory_Management\nEach of the two constructions in this project defines a create and destroy function. Your implementation should allocate anymemory that it needs on create, and free it on destroy for a given type. You should not use any global or static global variables in this project. All of the state for any semaphore or queue should be stored in the memory that is allocated on create.\nYou should use the standard dynamic allocator (e.g., malloc() or calloc() and free()) to manage this memory.\n6_Requirements\nYou must complete the APIs for both CSE_Semaphore and PCQueue as provided in the header files in the given code. In particular, you must implement:\n\u2022 CSE_Semaphore csesem_create(int count)\n\u2022 void csesem_wait(CSE_Semaphore sem)\n\u2022 void csesem_post(CSE_Semaphore sem)\n\u2022 void csesem_destroy(CSE_Semaphore sem)\n\u2022 PCQueue pcq_create(int slots)\n\u2022 void pcq_insert(PCQueue pcq, void *data)\n\u2022 void *pcq_retrieve(PCQueue pcq)\n\u2022 void pcq_destroy(PCQueue pcq)\nThe complete specifications for these functions are in their respective header files. As this API does not provide a way to report errors, you are not required to handle resource allocation\nerrors (e.g., failures of memory allocation or Pthreads creation functions) or application errors in accessing your implementation. You may assume that the application uses the API correctly as specified in the header files. In particular, the _create() functions will always run to completion before any other function is called on a CSE_Semaphore or PCQueue object, and no new accesses to the objects will be performed after the _destroy() functions have been invoked. (Note that there may be threads already accessing or blocked on your semaphore or queue when it is destroyed, and that it must handle that correctly!)\n7 Grading\nThis project is worth 5% of your final course grade. The points will be assigned as follows, although the Autograder score will not reflect the handout quiz:\n4\nPoints Description 2 Handout Quiz 7 CSE_Semaphore provides counting semaphore semantics 1.5 CSE_Semaphore destroys cleanly 8 PCQueue provides producer consumer queue semantics 1.5 PCQueue destroys cleanly",
                "created_at": "2024-11-30T09:24:01.795109+00:00"
            }
        ]
    },